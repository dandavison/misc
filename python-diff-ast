#!/bin/bash

set -e

die () {
    echo "$1" 1>&2
    exit 1
}

assert_working_directory_clean () {
    git diff --quiet \
    && git diff --cached --quiet \
    && [[ -z "$(git ls-files --other --exclude-standard)" ]] \
    || die "You have uncommitted files"
}

blacken () {
    local branch=$1
    local branch_blackened=$2
    git checkout $branch
    git checkout -b $branch_blackened
    black $files > /dev/null
    git add $files
    git commit -m "black"
}


assert_equivalent () {
    local file=$1
    git show $base_blackened:$file > /tmp/base.py
    git show $feature_blackened:$file > /tmp/feature.py
    python -c "
import black
black.assert_equivalent(
    open('/tmp/base.py').read(),
    open('/tmp/feature.py').read(),
)" > /dev/null
}


base="$1"
feature="$2"

[[ -n "$base" ]] && [[ -n "$feature" ]] || die "usage: $(basename $0) base-branch feature-branch

base-branch will typically be master"

assert_working_directory_clean

base_blackened=$base-$(uuidgen)
feature_blackened=$feature-$(uuidgen)

files=$(git diff --name-only --stat $base...$feature -- '*.py')

commit_to_restore=$(git rev-parse HEAD)
blacken $base $base_blackened
blacken $feature $feature_blackened

for file in $files; do
    echo $file
    assert_equivalent $file
done

git checkout $commit_to_restore
echo "You may want to delete the branches created:
$base_blackened
$feature_blackened
"

#!/usr/bin/env python
import os
import random
import subprocess
import sys
import termios
import tty

def error(msg):
    print >>sys.stderr, msg
    exit(1)


def warn(msg):
    print >>sys.stderr, msg


class ColorSchemeChooser(object):
    # TODO: arrow keys
    # UP = '\x1b[A'
    # LEFT = '\x1b[D'
    # RIGHT = '\x1b[C'
    # DOWN = '\x1b[B'

    DOWN = 'j'
    UP = 'k'

    def __init__(self, path='/tmp/iTerm2-Color-Schemes'):
        self.path = path
        self.schemes_dir = self.path + '/schemes'
        self.schemes = os.listdir(self.schemes_dir)
        self.apply_script = self.path + '/tools/preview.rb'

        if not os.path.exists(self.path):
            warn('Cloning iTerm2-Color-Schemes into %s' % self.path)
            self.clone_color_schemes_repo()

    def run(self):

        print 'j/k to move through color themes'

        i = random.choice(range(len(self.schemes)))
        while True:
            key = read_character()
            if key == self.UP:
                i -= 1
            elif key == self.DOWN:
                i += 1
            else:
                exit(0)
            i = i % len(self.schemes)
            self.apply_scheme(i)

    def apply_scheme(self, i):
        scheme = self.schemes[i]
        sys.stdout.write("\r%3d %s\r" % (i, scheme.split('.')[0]))
        subprocess.check_call([
            self.apply_script,
            self.schemes_dir + '/' + scheme,
        ])

    def clone_color_schemes_repo():
        # https://github.com/mbadolato/iTerm2-Color-Schemes
        subprocess.check_call([
            'git',
            'clone',
            'https://github.com/mbadolato/iTerm2-Color-Schemes.git',
            iterm2_color_schemes_dir,
        ])


def read_character():
    """
    http://stackoverflow.com/questions/510357/python-read-a-single-character-from-the-user
    """
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch


if __name__ == '__main__':

    if os.getenv('TMUX'):
        error("Please detach from your tmux session before running this script.")

    ColorSchemeChooser().run()
